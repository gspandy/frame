package mb.erp.dr.o2o.drools.rules.gdn;

import mb.erp.dr.soa.vo.SfDgnVo;
import mb.erp.dr.soa.vo.SfGdnVo;
import mb.erp.dr.soa.vo.SfGdnDtlVo;
import mb.erp.dr.soa.service.wareh.NewWarehService;
import mb.erp.dr.soa.vo.common.MsgListVo;
import mb.erp.dr.soa.service.price.NewSettlementPriceRateService;
import mb.erp.dr.soa.service.price.NewCostPriceRateService;
import mb.erp.dr.soa.dao.SfDgnMapper;
import java.util.List;
import java.util.ArrayList;
import mb.erp.dr.soa.dao.SfWarehTranMapper;
import mb.erp.dr.soa.bean.NewOrderSearchBean;
import mb.erp.dr.soa.vo.SfWarehCommitedTranVo;
import mb.erp.dr.soa.utils.SoaBillUtils;
import mb.erp.dr.soa.constant.O2OBillConstant.GdnMode;

rule "是否需要重新获取单价"
    salience 100
    lock-on-active true
    when
        $sfGdn : SfGdnVo(controlStatus matches "^1.*" )
        $dgnMapper : SfDgnMapper()
    then
        // System.out.println( "新ERP出库重新获取单价" );
        $sfGdn.getRulesGroup().add("rule1");
        //判断原始单据类型
        SfDgnVo dgnVo = $dgnMapper.selectDgnByCode($sfGdn.getSrcDocCode());
        // System.out.println( "新ERP出库重新获取单价:"+dgnVo.getSrcDocType() );
        $sfGdn.getRulesGroup().add(dgnVo.getSrcDocType());
end


rule "原始单据类型是否TBN"
    salience 90
    lock-on-active true
    when
        $sfGdn : SfGdnVo($rulesGroup : rulesGroup)
        $costPriceRateService:NewCostPriceRateService()
        $soaUtil : SoaBillUtils()
    then
        if($rulesGroup.contains("rule1") && $rulesGroup.contains("TBN")){
            // System.out.println( "原始单据类型是TBN,按发货组织获取成本价，折率为100%" );
            $sfGdn.getRulesGroup().add("rule2");
            List<SfGdnDtlVo> gdnDtlVos = $sfGdn.getSfGdnDtlVos();
            List<String> prod_numlist = new ArrayList<String>();
            for(int i=0;i<gdnDtlVos.size();i++){
                prod_numlist.add(gdnDtlVos.get(i).getProdCode());
            }
            List<MsgListVo> msgList= $costPriceRateService.bulkGetCostPriceRateByProdId(prod_numlist,$sfGdn.getVenderCode());
           for(int i=0;i<msgList.size();i++){
                MsgListVo tempVo = msgList.get(i);
                for(int j=0;j<gdnDtlVos.size();j++){
                    if("success".equals(tempVo.getCode())){
                        if(tempVo.getProdId().equals(gdnDtlVos.get(j).getProdCode())){
                            gdnDtlVos.get(j).setUnitPrice(tempVo.getPrice());
                            gdnDtlVos.get(j).setDiscRate(tempVo.getDiscRate());
                        }
                    }
                }
            }
            $soaUtil.resetSfOrderVal($sfGdn);
            $sfGdn.setSfGdnDtlVos(gdnDtlVos);
            update($sfGdn);
        }
end

rule "原始单据类型是IDT"
    salience 80
    lock-on-active true
    when
        $sfGdn : SfGdnVo($rulesGroup : rulesGroup)
        $settlementPriceRateService:NewSettlementPriceRateService()
        $soaUtil : SoaBillUtils()
   then
        if($rulesGroup.contains("rule1") && $rulesGroup.contains("IDT")){
            // System.out.println( "原始单据类型是IDT,根据订单购货方+购货方明细，重新获取结算价格和折率" );
            List<SfGdnDtlVo> gdnDtlVos = $sfGdn.getSfGdnDtlVos();
	        List<String> prod_numlist = new ArrayList<String>();
	        for(int i=0;i<gdnDtlVos.size();i++){
	            prod_numlist.add(gdnDtlVos.get(i).getProdCode());
	        }
	        List<MsgListVo> msgList= $settlementPriceRateService.bulkGetSettlementPriceRateByProdIdList(prod_numlist,$sfGdn.getVenderCode(),$sfGdn.getVendeeCode(),$sfGdn.getCurrency());
	        for(int i=0;i<msgList.size();i++){
	            MsgListVo tempVo = msgList.get(i);
	            for(int j=0;j<gdnDtlVos.size();j++){
	                if("success".equals(tempVo.getCode())){
	                    if(tempVo.getProdId().equals(gdnDtlVos.get(j).getProdCode())){
	                        gdnDtlVos.get(j).setUnitPrice(tempVo.getPrice());
	                        gdnDtlVos.get(j).setDiscRate(tempVo.getDiscRate());
	                    }
	                }
	            }
	        }
	        $soaUtil.resetSfOrderVal($sfGdn);
	        $sfGdn.setSfGdnDtlVos(gdnDtlVos);
	        update($sfGdn);
        }
end
/**
rule "是否需要释放冻结金额"
    salience 70
    lock-on-active true
    when
        $sfGdn : SfGdnVo(controlStatus matches "^[0-1][1].*")
    then
        $sfGdn.getRulesGroup().add("rule3");
        // System.out.println( "需要释放冻结金额" );
end

rule "原始单据是否冻结过金额"
    salience 60
    lock-on-active true
    when
        $sfGdn : SfGdnVo(rulesGroup contains "rule3")
        $balanceService:BalanceService()
    then
        // System.out.println( "原始单据冻结过金额" );
        // 查询冻结事务，判断是否冻结过金额
        List<FreezeTran> list = $balanceService.selectFreezeTranByDocTypeNum($sfGdn.getSrcUnitId(),$gdn.getRcvUnitId(),$sfGdn.getSrcDocType(),$sfGdn.getSrcDocNum());
        Double balance = 0d;
        for(FreezeTran temp : list){
            balance += temp.getBalance();
        }
        if(list != null && list.size() > 0){
            // 按原始单据冻结的金额进行释放
            BalanceBean bb = new BalanceBean();
            bb.setBalance(balance);
            bb.setUid($sfGdn.getSrcUnitId()); // 原始单据供货方
            bb.setCpdUid($sfGdn.getRcvUnitId());// 购货方
            bb.setDocType($sfGdn.getSrcDocType());
            bb.setDocNum($sfGdn.getSrcDocNum());
            $balanceService.reduceFreeze(bb);
        }
end

rule "第二次判断原始单据类型是否AAD或FON"
    salience 50
    lock-on-active true
    when
        $sfGdn : SfGdnVo(srcDocType == BillType.AAD || srcDocType == BillType.FON)
   then
        // System.out.println( "第二次判断原始单据是AAD或FON" );
        $sfGdn.getRulesGroup().add("rule4");
end

rule "是否需要扣减余额"
    salience 40
    lock-on-active true
    when
        $sfGdn : SfGdnVo(controlStatus matches "^[0-1]{2}[1].*" ,$rulesGroup : rulesGroup)
   then
        if(!$rulesGroup.contains("rule4")){
            // System.out.println( "需要扣减余额" );
            $sfGdn.getRulesGroup().add("rule5");
        }
end

rule "是否允许余额扣负"
    salience 30
    lock-on-active true
    when
        $sfGdn : SfGdnVo(controlStatus matches "^[0-1]{3}[1].*" ,$rulesGroup : rulesGroup)
        $balanceService:BalanceService()
   then
        if($rulesGroup.contains("rule4") || $rulesGroup.contains("rule5")){
            // System.out.println( "允许余额扣负" );
            $sfGdn.getRulesGroup().add("rule6");
            BalanceBean balanceBean = new BalanceBean();
	        balanceBean.setUid($sfGdn.getUnitId()); // 供货方（发货组织）
	        balanceBean.setCpdUid($sfGdn.getRcvUnitId()); // 购货方(接收方)
	        balanceBean.setBalance($sfGdn.getTtlVal()); // 总金额
	        balanceBean.setDocType(BillType.GDN);
	        balanceBean.setDocNum($sfGdn.getGdnNum());
	        $balanceService.reduceBalanceNegative(balanceBean); // 负数扣减余额
        }
end
**/


rule "原始单据是否增加了已分配库存"
    salience 70
    lock-on-active true
    when
        $sfGdn : SfGdnVo(controlStatus matches "^[0-1]{1}[1].*" ,$rulesGroup : rulesGroup)
        $warehMapper : SfWarehTranMapper()
   then
        // System.out.println( "新ERP出库判断原始单据是否增加了已分配库存");
        NewOrderSearchBean orderSearchBean = new NewOrderSearchBean();
        orderSearchBean.setWarehId($sfGdn.getBfOrgWarehId());
        orderSearchBean.setDocNum($sfGdn.getSrcDocCode());
        orderSearchBean.setDocType($sfGdn.getSrcDocType());
        //判断计划配货单或者调配单是否增加过已分配库存
        List<SfWarehCommitedTranVo> warehCommitedTranVo = $warehMapper.searchCommitTranInfo(orderSearchBean);
        if (warehCommitedTranVo != null && warehCommitedTranVo.size() > 0) {
            // System.out.println( "新ERP原始单据增加了已分配库存" );
            $sfGdn.getRulesGroup().add("rule3");
         }
end

rule "释放已分配库存"
    salience 60
    lock-on-active true
    when
        $sfGdn : SfGdnVo( $rulesGroup : rulesGroup)
        $warehService : NewWarehService()
        $sfDgnMapper : SfDgnMapper()
   then
        if($rulesGroup.contains("rule3")) {
             // System.out.println( "新ERP出库根据交货单释放已分配库存" );
             SfDgnVo vo = $sfDgnMapper.selectDgnByCode($sfGdn.getSrcDocCode());
             $warehService. reduceQtyCommittedByDgn(vo.getId());
        }
end

rule "是否需要扣减库存"
    salience 50
    lock-on-active true
    when
        $sfGdn : SfGdnVo(controlStatus matches "^[0-1]{2}[1].*" ,$rulesGroup : rulesGroup)
   then
            // System.out.println( "新ERP出库需要扣减库存" );
            $sfGdn.getRulesGroup().add("rule4");
end

rule "扣减库存"
    salience 40
    lock-on-active true
    when
        $sfGdn : SfGdnVo($rulesGroup : rulesGroup  )
        $warehService : NewWarehService()
   then
        if($rulesGroup.contains("rule4")) {
            // System.out.println( "新ERP扣减库存" );
            // 根据出库单扣减库存
            $warehService.reduceStockByGdn($sfGdn.getId());
        }
end

rule "出库单上是否存在货位ID"
    salience 30
    lock-on-active true
    when
        $sfGdn : SfGdnVo($rulesGroup : rulesGroup  )
        $warehService : NewWarehService()
   then
        if ($rulesGroup.contains("rule4")) {
            // System.out.println( "新ERP按发货货位或者指定货位扣减库存,出库单Id"+$sfGdn.getId());
            $warehService.reduceLocQtyByGDN($sfGdn.getId());
        }
end

rule "如果是调拨流程则增加在途库存"
    salience 20
    lock-on-active true
    when
        $sfGdn : SfGdnVo()
        $warehService : NewWarehService()
   then
         if(GdnMode.SHOR.name().equals($sfGdn.getDelivMode()) || $sfGdn.getBfOrgUnitId().equals($sfGdn.getBfOrgRcvUnitId())) {
            // System.out.println( "新ERP - 调拨增加在途库存" );
        	$warehService.increaseQtyInTransitByGdn($sfGdn.getId()); // 根据新出库单增加在途库存
        }
end

/**
rule "调用正数扣减余额接口"
    salience 7
    lock-on-active true
    when
        $sfGdn : SfGdnVo( $rulesGroup : rulesGroup   )
        $balanceService:BalanceService()
   then
        if(!$rulesGroup.contains("rule6") && ($rulesGroup.contains("rule4") || $rulesGroup.contains("rule5"))) {
            // System.out.println( "调用正数扣减余额接口" );
            BalanceBean balanceBean = new BalanceBean();
            balanceBean.setUid($sfGdn.getUnitId()); // 供货方（发货组织）
            balanceBean.setCpdUid($sfGdn.getRcvUnitId()); // 购货方(接收方)
            balanceBean.setBalance($sfGdn.getTtlVal()); // 总金额
            balanceBean.setDocType(BillType.GDN);
            balanceBean.setDocNum($sfGdn.getGdnNum());
            $balanceService.reduceBalancePositive(balanceBean); //调用正数扣减余额接口
        }
end
**/
